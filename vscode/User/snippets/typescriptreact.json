// put this in your typescriptreact.json snippets file. Command palette → Snippets: Configure User Snippets → typescriptreact
{
  "React useState": {
    "prefix": "us",
    "body": [
      "const [$1, set${1/(.*)/${1:/capitalize}/}] = useState(${2:default${1/(.*)/${1:/capitalize}/}})"
    ],
    "description": "Camel cased use state"
  },
  "React useEffect": {
    "prefix": "ue",
    "body": [
      "useEffect(() => {",
      "  $1",
      "}, [$2]);"
    ]
  },
  "React useCallback": {
    "prefix": "ucb",
    "body": [
      "useCallback(() => {",
      "  $1",
      "}, [$2]);"
    ]
  },
  "React useMemo": {
    "prefix": "umm",
    "body": [
      "useMemo(() => {",
      "  $1",
      "}, [$2]);"
    ]
  },
  "Async React Function Component": {
    "prefix": "arjsfc",
    "body": [
      "const $1 = async () => {",
      "  return $2;",
      "};",
      "",
      "export default $1;"
    ]
  },
  "Async React Function Component with Props": {
    "prefix": "arjsfcp",
    "body": [
      "interface $1Props {}",
      "",
      "const $1 = async ({}: $1Props) => {",
      "  return $2;",
      "};",
      "",
      "export default $1;"
    ]
  },
  "React Function Component": {
    "prefix": "rjsfc",
    "body": [
      "const $1 = () => {",
      "  return $2;",
      "};",
      "",
      "export default $1;"
    ]
  },
  "React Function Component with Props": {
    "prefix": "rjsfcp",
    "body": [
      "interface $1Props {}",
      "",
      "const $1 = ({}: $1Props) => {",
      "  return $2;",
      "};",
      "",
      "export default $1;"
    ]
  },
  "React Custom Hook": {
    "prefix": "rjsch",
    "body": [
      "export const use$1 = () => {$2}",
    ]
  },
  "Describe Test": {
    "prefix": "jdesc",
    "body": [
      "describe ('$1', () => {",
      "  it('$2', () => {",
      "    $3",
      "    expect(1).toEqual(2)",
      "  })",
      "})"
    ]
  }
}
