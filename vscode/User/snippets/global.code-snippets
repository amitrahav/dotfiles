{
  "const": {
    "prefix": "const",
    "body": "const ${1:name} = ${0};"
  },
  "ternary statement": {
    "prefix": "te",
    "body": "${1:cond} ? ${2:true} : ${3: false}"
  },
  "🦆 console.log()": {
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "prefix": "cl",
    "body": [
      "console.log('${1|🦀,🦜,🌭,🐷,🦆,🌮,🍟,🌽,🥐,🫒,🍪,🚀,🎉,💪,🤷‍♂️,🕵️‍♂️,🛳️,🐙,🍄,🐴|}', $2)",
      "$0"
    ],
    "description": "Log output to console"
},
  "template string": {
    "prefix": "ts",
    "body": [
      "`${$1}`",
    ],
  },
  "useState": {
    "prefix": "useState",
    "body": [
      "const [${1}, set${2}] = useState(${3});${0}",
    ],
  },
  "useEffect": {
    "prefix": "useEffect",
    "body": [
      "useEffect(() => {",
      " ${1}",
      "}, [${2}]);${0}"
    ]
  },
  "beforeEach test": {
    "prefix": "beforeEach",
    "body": [
      "beforeEach(() => {",
      "  ${1}",
      "});"
    ]
  },
  "afterEach test": {
    "prefix": "afterEach",
    "body": [
      "afterEach(() => {",
      "  ${1}",
      "});"
    ]
  },
  "describe test": {
    "prefix": "describe",
    "body": [
      "describe('${1:description}', () => {",
      "  ${0}",
      "});"
    ]
  },
  "it test": {
    "prefix": "it",
    "body": [
      "it('${1:description}', () => {",
      "  ${0}",
      "});"
    ]
  },
  "map": {
    "prefix": "map",
    "body": [
      "${1:iterable}.map(${2:item} => ",
      "  ${0}",
      ")"
    ]
  },
  "filter": {
    "prefix": "filter",
    "body": [
      "${1:iterable}.filter((${2:item}) => {",
      "  ${0}",
      "})"
    ]
  },
  "reduce": {
    "prefix": "reduce",
    "body": [
      "${1:iterable}.reduce((${2:curr}, ${3:val}) => {",
      "  ${0}",
      "}${4:, initial})"
    ]
  },
  "find": {
    "prefix": "find",
    "body": [
      "${1:iterable}.find((${2:item}) => {",
      "  ${0}",
      "})"
    ]
  },
  "return a promise": {
    "prefix": "returnpromise",
    "body": [
      "return new Promise((resolve, reject) => {",
      "  ${0}",
      "})"
    ]
  },
  "import x from 'x'": {
    "prefix": "imp",
    "body": "import { $1 } from '../$2';$0"
  },
  "import React from 'react'": {
    "prefix": "impr",
    "body": "import React from 'react';"
  },
  "throw log": {
    "prefix": "tl",
    "body": "throw new Error(JSON.stringify({$0}, null, 2))"
  },
  "try/catch": {
    "prefix": "try",
    "body": [
      "try {",
      "  $1",
      "} catch (error) {",
      "  $0",
      "}"
    ]
  },
  "async function": {
    "prefix": "async",
    "body": [
      "async function $1($2) {",
      "  $0",
      "}"
    ]
  },
  "spaced console.log": {
    "prefix": "scl",
    "body": [
      "console.log('**************************************************************************\\\\n\\\\n\\\\n')",
      "console.log($0)",
      "console.log('\\\\n\\\\n\\\\n**************************************************************************')"
    ]
  },
}
